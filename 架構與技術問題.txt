架構選擇點一：資料儲存策略（簡報版）

問題：

從 API 取得的資料需決定儲存方式，影響後續的效能、擴充性與開發速度。

三種方案概述：

1. 資料庫儲存（MySQL / SQLite）

適合大量資料與複雜查詢需求

易於擴充與系統整合，但建置複雜

2. 寫入檔案（JSON）

開發快速，保留原始格式，便於除錯

缺乏查詢功能，不易擴充

3. 儲存在記憶體（如 vector）

存取最快，適合即時處理

無法持久化，適合暫存

專案階段建議：

開發初期採 JSON 儲存，簡單快速且方便檢查

若需求擴大，可轉為 SQLite 或 MySQL

即時傳輸則暫存在記憶體中處理後即釋放

業界做法參考：

小型原型或工具常用檔案儲存

後台系統使用資料庫+Cache

金融交易系統偏好記憶體+定時落盤



-----------------------------------------

架構選擇點二：應用層設計與協定層實作區分

問題：

專案中 Client 與 Server 使用不同技術實作（Windows socket 與 Qt socket），需要確保可正確溝通並處理複雜資料格式。

架構層（應用層設計）：

我們設計了自訂的 應用層協定，定義資料如何被封裝與解封。

封包格式範例：Header（長度、型別） + Payload（資料）

可擴充性高，未來若有不同資料型態（圖片、JSON、壓縮包），可藉由型別欄位區分。

技術層（協定層實作）：

使用 TCP 協定作為傳輸層，透過 Winsock（Windows）與 QTcpSocket（Qt）建立連線。

因兩者皆遵守 TCP 標準協定，因此能夠跨平台傳輸。

Socket 開發常見問題：

封包黏包/斷包（TCP Stream 特性）：需實作長度偵測與重組邏輯

連線中斷/錯誤處理：需處理 recv/send 回傳值、client 斷線情況

資料同步與多執行緒處理：必須搭配 thread pool 與同步機制（如 mutex）避免 race condition

編碼格式問題：不同平台預設可能有 UTF-8 / GBK 等需統一